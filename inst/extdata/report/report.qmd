---
title: "Posit Connect Audit"
format: 
  html:
    self-contained: true
    theme: flatly
editor_options:
  chunk_output_type: console
params:
  input: "~/auditconnect.rds"
---

<!--IMPORTANT:
This is a working draft.
As I've worked through the sections, I spot where the check() output could be tweaked to
provide a better report.

As such, this report will change!
Consider this a rough draft, that you are able to view :)

Yes, I know the code is horrible - see above comments :)
--->

```{r}
#| echo: false
# quarto render report.qmd -P input:output.rds
library("lubridate", quietly = TRUE, warn.conflicts = FALSE)
library("gt")
library("audit.connect")
out = readRDS(params$input)
audit_details = out$audit_details
severe = "#f59d9a"
moderate = "#f5cf9a"
trivial = "#c0d1ed"

server_name = stringr::str_remove_all(out$setup$server, "(^http?s://|/$)")
```

## Overview  (`r server_name`)

This audit was run by `r glue::glue("{audit_details$first_name} {audit_details$last_name} (<{audit_details$email}>)")`, using {audit.connect} R package (version `r audit_details$version`). The account level was `r audit_details$user_role`.

`r audit.base::get_quarto_server_version_msg(out, audit.base::get_posit_versions("connect"))`

```{r}
#| echo: false
feat_usage = dplyr::bind_rows(out$feature_usage)
used = feat_usage$name[feat_usage$used]
unused = feat_usage$name[!feat_usage$used]
```

## Feature Usage

* __Used__: `r {used}`
* __Unused__: `r {unused}`


## Server Headings

This audit examines the server headings of the Posit Connect (or the server sitting in front of Connect).
It is important to note, that there may be cases where you may want to deviate from setting these
headings. However, this is the exception and not the rule. 
The headings listed below follow the recommendations of securityheaders.com and (to a certain extent)
Mozilla. Where the heading has not been set, we provide links to documentation.

```{r}
#| echo: false
headers = audit.base::get_quarto_server_header(out)
gt::gt(headers) |>
  gt::cols_label("header" = "Header",  message = "Information") |>
  gt::cols_align("left") |>
  gt::cols_hide("status")  |>
  gt::tab_row_group(label = "Looks good", rows = which(headers$status == "OK")) |>
  gt::tab_row_group(label = "To investigate", rows = which(headers$status != "OK")) |>
  gtExtras::gt_merge_stack(col1 = "message", col2 = "value",
                           palette = c("grey10", "grey50"),
                           font_weight = c("normal", "normal"),
                           small_cap = FALSE
  )
```

## Connect Users 

```{r}
#| echo: false
user_list = out$users_details$user_list
```

Standard security practice is to remove users that are no longer in your organisation.
While we can't detect these users, a useful proxy is to detect registered users
who have not accessed the system in a significant time.

This Connect server is licenced for `r user_list$user_account_limit` users.

```{r}
#| echo: false
old_users = audit.connect::get_quarto_old_users(out)
gt::gt(old_users) |>
  gt::cols_label("last_log_in" = "Last Log In", "email" = "User Email") |>
  gt::cols_align("left") |>
  gt::tab_style(style = gt::cell_text(v_align = "top"),
            locations = gt::cells_body(columns = last_log_in))
```

```{r}
#| echo: false
roles = audit.connect::get_quarto_user_roles(out)
n_users = purrr::map_int(roles, length)
```

Out of the `r sum(n_users)` registered users, there are:

* `r n_users["administrator"]` Administrators (`r glue::glue("{roles[['administrator']]}")`)
* `r n_users["publisher"]` Publishers
* `r n_users["viewer"]` Viewers

## System Dependencies

Posit Connect allows users to push dashboards and markdown documents. 
However, these applications contain R packages that have system level dependencies.
This check tries to determine which R packages would fail to install.


```{r}
#| echo: false
sys_deps = audit.base::get_quarto_sys_deps(out)
```

### Summary

There are `r nrow(sys_deps)` R packages that can't be installed, due to 
`r sum(sys_deps$n)` missing system dependencies.

```{r}
#| echo: false
gt::gt(sys_deps) |>
  gt::cols_label("sys_libs" = "System Library",
                 "pkg" = "R Package") |>
  gt::cols_align("left") |>
  gt::cols_hide("n") |>
  gt::tab_style(style = gt::cell_text(v_align = "top"), 
                locations = gt::cells_body(columns = sys_libs))

```

## Software Versions

Posit Connect contains multiple versions of R, Python and Quarto.
This audit compares the installed version, to the latest version. 
We've highlighted any older versions.

```{r}
#| echo: false
software = audit.base::get_quarto_software_versions(out)
gt::gt(software) |>
  gt::cols_label("version" = "Latest version",
                 "installed_version" = "Installed version") |>
  gt::cols_align("right") |>
  gt::cols_hide(c("software", "upgrade")) |>

   gt::tab_row_group(label = "R", rows = which(.data$software == "r")) |>
   gt::tab_row_group(label = "Python", rows = which(.data$software == "python")) |>
   gt::tab_row_group(label = "Quarto", rows = which(.data$software == "quarto")) |>

  gtExtras::gt_highlight_rows(rows = which(.data$upgrade), font_color = "white",
                              fill = severe) 
```

## Deployments

This audit deploys a variety of applications, ranging from Shiny apps to quarto documents.
The test determines if the application has been successful launched.

```{r}
#| echo: false
deploy = audit.base::get_quarto_deploy(out)
gt::gt(deploy)  |>
  gt::cols_label("context" = "Deployment",
                 "time_taken" = "Time (secs)") |>
  gt::cols_align("right", "time_taken") |>
  gt::cols_hide(c("passed", "group", "short")) |>
  gt::tab_row_group(label = "Failed", rows = which(!deploy$passed)) |>
  gt::tab_row_group(label = "Looks good", rows = which(deploy$passed)) |>
  gtExtras::gt_merge_stack(col1 = "context", col2 = "type",
                           palette = c("grey10", "grey50"),
                           font_weight = c("normal", "normal"),
                           small_cap = FALSE
  ) 
```
